import numpy as np

l_max = 10

radii = (0.01, 100) # small and large radii
N = 500

# for the (b,r) error plot on f
error_orders = [20,100,500]

n_max = (l_max + 1) ** 2
ys = np.eye(n_max, n_max)
ys[:, 0] = 1.0

rule all:
    input:
        "figures/error_jax.pdf",
        "figures/error_starry.pdf",
        "figures/error_degree.pdf",
        "figures/limbdark_error.pdf",
        "figures/error_SAR.pdf",
        "figures/br_error.png",
        "figures/error_order.pdf",
        "figures/error_order_degree.pdf"


# ERROR FOR DIFFERENT SPHERICAL HARMONIC DEGREES
# ----------------------------------------------

rule b:
    output: "data/b_{r}.npz"
    script: "scripts/make_b.py"

rule num_fs_matrices:
    # Compute the A1, A2 and rotation matrices for a given l_max
    output: "data/num_fs_matrices.npz"
    params: 
        l_max = l_max
    script: "scripts/num_fs_matrices.py"


rule num_sT:
    # Compute the solution vector s for a given r and range of b
    input: "data/b_{r}.npz"
    output: "data/num_sT_{r}.npz"
    params:
        l_max = l_max
    script: "scripts/num_sT.py"

rule num_fs:
    # (mpmath) Compute the flux for a given r and range of b, i is the index of 
    # the spherical harmonic component
    input: "data/b_{r}.npz", "data/num_fs_matrices.npz", "data/num_sT_{r}.npz"
    output: "data/num_fs_{r}_{i}.npz"
    params:
        l_max = l_max,
        y = lambda wildcards: ys[int(wildcards.i)]
    script: "scripts/num_fs.py"


rule concatenate_fs:
    # Concatenate the fluxes and s for all values of i
    input: 
        bs = "data/b_{r}.npz", 
        i = [f"data/num_fs_{{r}}_{i}.npz" for i in range(n_max)],
    output: "results/num_fs_{r}.npz"
    script: "scripts/concatenate_fs.py"


rule jax_fs:
    # (jax) Compute the flux for a given r and range of b, i is the index of 
    # the spherical harmonic component
    input: "data/b_{r}.npz"
    output: "results/jax_fs_r={r}_order={order}.npz"
    params:
        l_max = l_max,
        ys = ys
    script: "scripts/jax_fs.py"

rule starry_fs:
    # (starry) Compute the flux for a given r and range of b, i is the index of 
    # the spherical harmonic component
    input: "data/b_{r}.npz"
    output: "results/starry_fs_{r}.npz"
    params:
        l_max = l_max,
        ys = ys
    script: "scripts/starry_fs.py"


rule plot_error_jax:
    # Plot the error in the flux and s as a function of b and the degree of the spherical harmonic
    input:
        ref = [f"results/num_fs_{r}.npz" for r in radii],
        comp = [f"results/jax_fs_r={r}_order=500.npz" for r in radii],
        b = [f"data/b_{r}.npz" for r in radii]
    params:
        l_max = l_max
    output: "figures/error_jax.pdf"
    script: "scripts/plot_error.py"


rule plot_error_starry:
    # Plot the error in the flux and s as a function of b and the degree of the spherical harmonic
    input:
        ref = [f"results/num_fs_{r}.npz" for r in radii],
        comp = [f"results/starry_fs_{r}.npz" for r in radii],
        b = [f"data/b_{r}.npz" for r in radii]
    params:
        l_max = l_max
    output: "figures/error_starry.pdf"
    script: "scripts/plot_error.py"


rule plot_error_degree:
    # Plot the error in the flux and s as a function of b and the degree of the spherical harmonic
    input:
        jax = [f"results/jax_fs_r={r}_order=500.npz" for r in radii],
        num = [f"results/num_fs_{r}.npz" for r in radii],
        starry = [f"results/starry_fs_{r}.npz" for r in radii]
    params:
        l_max = l_max
    output: "figures/error_degree.pdf"
    script: "scripts/plot_error_vs_degree.py"

rule compute_SAR:
# Compute the s, A and R matrices with jax, starry and mpmath (s and R only)
    output: "results/SAR.npz"
    params:
        l_max = l_max
    script: "scripts/SAR_jax_starry.py"


rule plot_error_SAR:
    # Plot the error in the s, A and R matrices of jax and starry compared to mpmath
    input: "data/num_fs_matrices.npz", "results/SAR.npz"
    output: "figures/error_SAR.pdf"
    params:
        l_max = l_max
    script: "scripts/plot_error_SAR.py"

rule make_br_dense:
    # Make a dense grid in (b, r) space
    output: "data/br_dense_{N}.npz"
    script: "scripts/make_br_dense.py"

rule br_f_jax:
    # Compute the flux in (b, r) space for different orders
    input: f"data/br_dense_{N}.npz"
    output: "data/jax_f_order_{order}.npz"
    script: "scripts/jax_br_flux.py"

rule br_f_starry:
    # Compute the flux in (b, r) space for different orders
    input: f"data/br_dense_{N}.npz"
    output: "data/starry_f_order.npz"
    script: "scripts/starry_br_flux.py"


rule br_plot:
    # Plot error on the flux in (b, r) space for different orders
    input: 
        jaxoplanet = [f"data/jax_f_order_{order}.npz" for order in error_orders],
        starry = "data/starry_f_order.npz",
        br = f"data/br_dense_{N}.npz"
    output: "figures/br_error.png"
    params:
        orders = error_orders
    script: "scripts/plot_br_error.py"

# ERROR FOR DIFFERENT LIMB-DARKENING POLYNOMIAL ORDERS
# ----------------------------------------------------

rule num_fs_limbdark:
    # Compute the flux for a given r and range of b for a limb-darkened star
    # with polynomial law
    input: 
        b = "data/b_{r}.npz", 
        matrices = "data/num_fs_matrices.npz",
        fs = "results/num_fs_{r}.npz"
    output: "results/num_limbdark_f_{r}.npz"
    params:
        degree = l_max
    script: "scripts/num_f_limbdark.py"

rule jax_fs_limbdark:
    # Compute the flux for a given r and range of b for a limb-darkened star
    # with polynomial law
    input: "data/b_{r}.npz"
    output: "results/jax_limbdark_f_{r}.npz"
    params:
        degree = l_max,
        order = 500
    script: "scripts/jax_f_limbdark.py"

rule jax_fs_nonuniform_limbdark:
    # Compute the flux for a given r and range of b for a limb-darkened star
    # with polynomial law
    input: "data/b_{r}.npz"
    output: "results/jax_nonuniform_limbdark_f_{r}.npz"
    params:
        degree = l_max,
        order = 500
    script: "scripts/jax_f_nonuiform_limbdark.py"

rule exoplanet_fs_limbdark:
    # Compute the flux for a given r and range of b for a limb-darkened star
    # with polynomial law
    input: "data/b_{r}.npz"
    output: "results/exoplanet_limbdark_f_{r}.npz"
    params:
        degree = l_max
    script: "scripts/exoplanet_f_limbdark.py"

rule starry_fs_limbdark:
    # Compute the flux for a given r and range of b for a limb-darkened star
    # with polynomial law
    input: "data/b_{r}.npz"
    output: "results/starry_limbdark_f_{r}.npz"
    params:
        degree = l_max
    script: "scripts/starry_f_limbdark.py"


rule plot_error_limbdark:
    # Plot the error in the flux and s as a function of b and the degree of the spherical harmonic
    input:
        jax = [f"results/jax_f_{r}.npz" for r in radii],
        jax_ld = [f"results/jax_limbdark_f_{r}.npz" for r in radii],
        starry = [f"results/starry_limbdark_f_{r}.npz" for r in radii],
        exo = [f"results/exoplanet_limbdark_f_{r}.npz" for r in radii],
        num = [f"results/num_limbdark_f_{r}.npz" for r in radii],
    params:
        degree = l_max
    output: "figures/limbdark_error.pdf"
    script: "scripts/plot_error_limbdark.py"


# ERROR FOR DIFFERENT RADII AND GAUSS-LEGENDRE ORDERS
# ---------------------------------------------------

GL_radii = [0.01, 0.1, 1.0, 10, 100]
orders = [20, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500]

rule concatenate_errors_GL:
    input:
        num = [f"results/num_fs_{r}.npz" for r in GL_radii],
        **{f"jax_{order}": [f"results/jax_fs_r={r}_order={order}.npz" for r in GL_radii] for order in orders},
    params:
        rs = GL_radii,
        orders = orders
    output: "results/errors_GL.npz"
    script: "scripts/concatenate_errors_GL.py"

rule plot_error_GL:
    input: "results/errors_GL.npz"
    output: "figures/error_order.pdf"
    script: "scripts/plot_error_GL.py"


rule plot_error_degree_GL:
    input: "results/errors_GL.npz"
    output: "figures/error_order_degree.pdf"
    params:
        l_max = l_max
    script: "scripts/plot_error_several_r_GL_degree_SH.py"